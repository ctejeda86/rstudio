activity2 <- activity[activity$userId != 10041,]
boxplot(activity2$steps ~ activity2$userId)
View(activity2)
steps_10039 <- activity[activity$userId == 10039, c("steps")]
View(user_activity)
boxplot(steps_10039)$out
activity_10039 <- activity[activity$userId == 10039,]
View(activity_10039)
summary(activity_10039$steps)
# guardamos los outliers en una variable
outliers_10039 <- boxplot(steps_10039)$out
outliers_10039
activity2 <- activity[activity$userId != 10041,]
View(activity2)
activity <- activity[activity$userId != 10041,]
boxplot(activity$steps ~ activity$userId)
#seteamos el directorio de trabajo
setwd("/lab/adictosaltrabajo/rstudio/04")
# Vamos a leer un CSV del proyecto GeriaTIC
# https://www.geriatic.udc.es/el-proyecto/datos-abiertos-open-data-del-proyecto-geria-tic/
user_activity <- read.csv("./user_activity.csv")
# Vamos a leer un CSV del proyecto GeriaTIC
# https://www.geriatic.udc.es/el-proyecto/datos-abiertos-open-data-del-proyecto-geria-tic/
user_activity <- read.csv("./user_activity.csv")
View(user_activity)
#nos quedamos con una version simplificada
activity <- user_activity[,c("userId","registerStartDate","steps","distance","calories")]
View(activity)
# Histograma numero de pasos
hist(activity$steps, main="Frecuencia de número de pasos")
# Vamos a convertir la variable numerica "pasos" en categorica
# para ello definimos los puntos de corte
breakPoints <- c(0, 2000, 4000, 6000, Inf)
categories <- c("Low", "Medium", "High", "Very High")
# y cortamos la variable número de pasos segun esta categorizacion
activity$steps.F <- cut(activity$steps, breaks = breakPoints, labels = categories)
View(activity)
summary(activity$steps)
activity_10039 <- activity[activity$userId == 10039,]
View(activity_10039)
boxplot(steps ~ userId,
data = activity,
main = "Pasos por usuario")
activity <- activity[activity$userId != 10041,]
boxplot(activity$steps ~ activity$userId)
boxplot(steps ~ userId,
data = activity,
main = "Pasos por usuario")
outliersReplace <- function(data, lowLimit, highLimit){
data[data<lowLimit] <- mean(data)
data[data>lowLimit] <- median(data)
data
}
steps_10039_2 <- outliersReplace(steps_10039, 1045, 4884.5)
steps_10039 <- activity_10039$steps
steps_10039_2 <- outliersReplace(steps_10039, 1045, 4884.5)
sumary(steps_10039)
summary(steps_10039)
summary(steps_10039_2)
par(mfrow = c(1,2))
boxplot(steps_10039, main = "Sin reemplazo de outliers")
boxplot(steps_10039_2, main = "Con reemplazo de outliers")
outliersReplace <- function(data, lowLimit, highLimit){
data[data<lowLimit] <- mean(data)
data[data>highLimit] <- median(data)
data
}
steps_10039_2 <- outliersReplace(steps_10039, 1045, 4884.5)
summary(steps_10039)
summary(steps_10039_2)
par(mfrow = c(1,2))
boxplot(steps_10039, main = "Sin reemplazo de outliers")
boxplot(steps_10039_2, main = "Con reemplazo de outliers")
# df es el dataFrame que recibimos (ej. activity)
# col es la columna de los datos (ej. "steps")
# by es la columna por la que agruparemos (ej. "userId)
outliersReplace <- function(df, col, by){
parts <- unique(df[,c(by)])
parts
}
outliersReplace(activity,"steps","userId")
# df es el dataFrame que recibimos (ej. activity)
# col es la columna de los datos (ej. "steps")
# by es la columna por la que agruparemos (ej. "userId)
outliersReplace <- function(df, col, by){
chunks <- unique(df[,c(by)])
for (c in chucks){
Me <- median(df[df[by] == c,c(col)])
Me
}
}
outliersReplace(activity,"steps","userId")
# df es el dataFrame que recibimos (ej. activity)
# col es la columna de los datos (ej. "steps")
# by es la columna por la que agruparemos (ej. "userId)
outliersReplace <- function(df, col, by){
chunks <- unique(df[,c(by)])
for (c in chunks){
Me <- median(df[df[by] == c,c(col)])
Me
cat(paste("El", by, "tiene una mediana de", col, "de", Me, sep=" " ))
}
}
outliersReplace(activity,"steps","userId")
cat(paste("El", by, "tiene una mediana de", col, "de", Me, "\n", sep=" " ))
cat(paste("El", by, "tiene una mediana de", col, "de", Me, "\n", sep=" " ))
# df es el dataFrame que recibimos (ej. activity)
# col es la columna de los datos (ej. "steps")
# by es la columna por la que agruparemos (ej. "userId)
outliersReplace <- function(df, col, by){
chunks <- unique(df[,c(by)])
for (c in chunks){
Me <- median(df[df[by] == c,c(col)])
Me
cat(paste("El", by, "tiene una mediana de", col, "de", Me, "\n", sep=" " ))
}
}
outliersReplace(activity,"steps","userId")
cat(paste("El", by, ":", c, "tiene una mediana de", col, "de", Me, "\n", sep=" " ))
# df es el dataFrame que recibimos (ej. activity)
# col es la columna de los datos (ej. "steps")
# by es la columna por la que agruparemos (ej. "userId)
outliersReplace <- function(df, col, by){
chunks <- unique(df[,c(by)])
for (c in chunks){
Me <- median(df[df[by] == c,c(col)])
Me
cat(paste("El", by, ":", c, "tiene una mediana de", col, "de", Me, "\n", sep=" " ))
}
}
outliersReplace(activity,"steps","userId")
median(activity[activity$userId = 10036, c("steps")])
activity[activity$userId == 10036, c("steps")]
median(activity[activity$userId == 10036, c("steps")])
outliersReplace(activity,"steps","userId")
cat(paste("El", by, c, "tiene una mediana de", col, "de", Me, "\n", sep=" " ))
# df es el dataFrame que recibimos (ej. activity)
# col es la columna de los datos (ej. "steps")
# by es la columna por la que agruparemos (ej. "userId)
outliersReplace <- function(df, col, by){
chunks <- unique(df[,c(by)])
for (c in chunks){
Me <- median(df[df[by] == c,c(col)])
Me
cat(paste("El", by, c, "tiene una mediana de", col, "de", Me, "\n", sep=" " ))
}
}
quantile(activity[activity$userId == 10036, c("steps")])
q <- quantile(activity[activity$userId == 10036, c("steps")])
# df es el dataFrame que recibimos (ej. activity)
# col es la columna de los datos (ej. "steps")
# by es la columna por la que agruparemos (ej. "userId)
outliersReplace <- function(df, col, by){
chunks <- unique(df[,c(by)])
for (c in chunks){
Q  <- quantile(df[df[by] == c,c(col)])
MIN <- Q[1]    # valor minimo
Q1  <- Q[2]    # primer cuartil
Me  <- Q[3]    # mediana
Q3  <- Q[4]    # tercer cuartil
MAX <- Q[5]    # valor maximo
IQR <- Q3 - Q1
lowLimit <- max(MIN, Q1 - 1.5*IQR)
highLimit <- min(MAX, Q3 + 1.5*IQR)
# todos los valores donde la columna by es igual a c
# y el valor de la columna col > Q3 + 1.5 * IQR
# lo reemplazamos por la mediana
df[df[by] == c && df[col] > highLimit, df[col]] <- Me
# lo mismo para el umbral inferior
df[df[by] == c && df[col] < lowLimit, df[col]] <- Me
cat(paste("El", by, c, "tiene una mediana de", col, "de", Me, "\n", sep=" " ))
summary(df[df[by] == c, df[col]])
}
}
outliersReplace(activity,"steps","userId")
# df es el dataFrame que recibimos (ej. activity)
# col es la columna de los datos (ej. "steps")
# by es la columna por la que agruparemos (ej. "userId)
outliersReplace <- function(df, col, by){
chunks <- unique(df[,c(by)])
for (c in chunks){
Q  <- quantile(df[df[by] == c,c(col)])
MIN <- Q[1]    # valor minimo
Q1  <- Q[2]    # primer cuartil
Me  <- Q[3]    # mediana
Q3  <- Q[4]    # tercer cuartil
MAX <- Q[5]    # valor maximo
IQR <- Q3 - Q1
lowLimit <- max(MIN, Q1 - 1.5*IQR)
highLimit <- min(MAX, Q3 + 1.5*IQR)
# todos los valores donde la columna by es igual a c
# y el valor de la columna col > Q3 + 1.5 * IQR
# lo reemplazamos por la mediana
df[df[by] == c && df[col] > highLimit, c(col)] <- Me
# lo mismo para el umbral inferior
df[df[by] == c && df[col] < lowLimit, c(col)] <- Me
cat(paste("El", by, c, "tiene una mediana de", col, "de", Me, "\n", sep=" " ))
summary(df[df[by] == c, c(col)])
}
}
outliersReplace(activity,"steps","userId")
cat(paste("El", by, c, "tiene una mediana de", col, "de", Me, "\n", sep=" " ))
# df es el dataFrame que recibimos (ej. activity)
# col es la columna de los datos (ej. "steps")
# by es la columna por la que agruparemos (ej. "userId)
outliersReplace <- function(df, col, by){
chunks <- unique(df[,c(by)])
for (c in chunks){
Q  <- quantile(df[df[by] == c,c(col)])
MIN <- Q[1]    # valor minimo
Q1  <- Q[2]    # primer cuartil
Me  <- Q[3]    # mediana
Q3  <- Q[4]    # tercer cuartil
MAX <- Q[5]    # valor maximo
IQR <- Q3 - Q1
lowLimit <- max(MIN, Q1 - 1.5*IQR)
highLimit <- min(MAX, Q3 + 1.5*IQR)
# todos los valores donde la columna by es igual a c
# y el valor de la columna col > Q3 + 1.5 * IQR
# lo reemplazamos por la mediana
df[df[by] == c && df[col] > highLimit, c(col)] <- Me
# lo mismo para el umbral inferior
df[df[by] == c && df[col] < lowLimit, c(col)] <- Me
cat(paste("El", by, c, "tiene una mediana de", col, "de", Me, "\n", sep=" " ))
}
df
}
kk <- outliersReplace(activity,"steps","userId")
View(kk)
kk <- outliersReplace(activity,"steps","userId")
kk <- outliersReplace(activity,"steps","userId")
median(activity[activity$userId == 10036, c("steps")])
median(activity[activity$userId == 10036, c("steps")])
median(activity[activity$userId == 10036, c("steps")])
median(activity[activity$userId == 10036, c("steps")])
median(activity[activity$userId == 10036, c("steps")])
kk <- outliersReplace(activity,"steps","userId")
# df es el dataFrame que recibimos (ej. activity)
# col es la columna de los datos (ej. "steps")
# by es la columna por la que agruparemos (ej. "userId)
outliersReplace <- function(df, col, by){
chunks <- unique(df[,c(by)])
for (c in chunks){
Q  <- quantile(df[df[by] == c,c(col)])
MIN <- Q[1]    # valor minimo
Q1  <- Q[2]    # primer cuartil
Me  <- Q[3]    # mediana
Q3  <- Q[4]    # tercer cuartil
MAX <- Q[5]    # valor maximo
IQR <- Q3 - Q1
lowLimit <- max(MIN, Q1 - 1.5*IQR)
cat(paste("El lowLimit es: ", lowLimit, sep = ""))
highLimit <- min(MAX, Q3 + 1.5*IQR)
cat(paste("El highLimit es: ", highLimit, sep = ""))
# todos los valores donde la columna by es igual a c
# y el valor de la columna col > Q3 + 1.5 * IQR
# lo reemplazamos por la mediana
df[df[by] == c && df[col] > highLimit, c(col)] <- Me
# lo mismo para el umbral inferior
df[df[by] == c && df[col] < lowLimit, c(col)] <- Me
cat(paste("El", by, c, "tiene una mediana de", col, "de", Me, "\n", sep=" " ))
}
df
}
kk <- outliersReplace(activity,"steps","userId")
# df es el dataFrame que recibimos (ej. activity)
# col es la columna de los datos (ej. "steps")
# by es la columna por la que agruparemos (ej. "userId)
outliersReplace <- function(df, col, by){
chunks <- unique(df[,c(by)])
for (c in chunks){
Q  <- quantile(df[df[by] == c,c(col)])
mmm <- Q[1]    # valor minimo
Q1  <- Q[2]    # primer cuartil
Me  <- Q[3]    # mediana
Q3  <- Q[4]    # tercer cuartil
MMM <- Q[5]    # valor maximo
IQR <- Q3 - Q1
lowLimit <- max(mmm, Q1 - 1.5*IQR)
cat(paste("El lowLimit es: ", lowLimit, sep = ""))
highLimit <- min(MMM, Q3 + 1.5*IQR)
cat(paste("El highLimit es: ", highLimit, sep = ""))
# todos los valores donde la columna by es igual a c
# y el valor de la columna col > Q3 + 1.5 * IQR
# lo reemplazamos por la mediana
df[df[by] == c && df[col] > highLimit, c(col)] <- Me
# lo mismo para el umbral inferior
df[df[by] == c && df[col] < lowLimit, c(col)] <- Me
cat(paste("El", by, c, "tiene una mediana de", col, "de", Me, "\n", sep=" " ))
}
df
}
kk <- outliersReplace(activity,"steps","userId")
# df es el dataFrame que recibimos (ej. activity)
# col es la columna de los datos (ej. "steps")
# by es la columna por la que agruparemos (ej. "userId)
outliersReplace <- function(df, col, by){
chunks <- unique(df[,c(by)])
for (c in chunks){
Q  <- quantile(df[df[by] == c,c(col)])
mmm <- Q[1]    # valor minimo
Q1  <- Q[2]    # primer cuartil
Me  <- Q[3]    # mediana
Q3  <- Q[4]    # tercer cuartil
MMM <- Q[5]    # valor maximo
IQR <- Q3 - Q1
lowLimit <- max(mmm, Q1 - 1.5*IQR)
highLimit <- min(MMM, Q3 + 1.5*IQR)
cat(paste(Q, "\n", sep = ""))
# todos los valores donde la columna by es igual a c
# y el valor de la columna col > Q3 + 1.5 * IQR
# lo reemplazamos por la mediana
df[df[by] == c && df[col] > highLimit, c(col)] <- Me
# lo mismo para el umbral inferior
df[df[by] == c && df[col] < lowLimit, c(col)] <- Me
cat(paste("El", by, c, "tiene una mediana de", col, "de", Me, "\n", sep=" " ))
}
df
}
kk <- outliersReplace(activity,"steps","userId")
# df es el dataFrame que recibimos (ej. activity)
# col es la columna de los datos (ej. "steps")
# by es la columna por la que agruparemos (ej. "userId)
outliersReplace <- function(df, col, by){
chunks <- unique(df[,c(by)])
for (c in chunks){
Q  <- quantile(df[df[by] == c,c(col)])
mmm <- Q[1]    # valor minimo
Q1  <- Q[2]    # primer cuartil
Me  <- Q[3]    # mediana
Q3  <- Q[4]    # tercer cuartil
MMM <- Q[5]    # valor maximo
IQR <- Q3 - Q1
lowLimit <- max(mmm, Q1 - 1.5*IQR)
highLimit <- min(MMM, Q3 + 1.5*IQR)
cat(paste(df[df[by] == c,c(col)], "\n", sep = ""))
# todos los valores donde la columna by es igual a c
# y el valor de la columna col > Q3 + 1.5 * IQR
# lo reemplazamos por la mediana
df[df[by] == c && df[col] > highLimit, c(col)] <- Me
# lo mismo para el umbral inferior
df[df[by] == c && df[col] < lowLimit, c(col)] <- Me
cat(paste("El", by, c, "tiene una mediana de", col, "de", Me, "\n", sep=" " ))
}
df
}
kk <- outliersReplace(activity,"steps","userId")
activity["userId"] == 10036
activity[activity["userId"] == 10036, ]
activity[activity["userId"] == 10036, c("steps")]
usuarios <- unique(activity[,c("userId")])
data <- activity[activity$userId == 10036, c("steps")]
q <- quantile(data)
# df es el dataFrame que recibimos (ej. activity)
# col es la columna de los datos (ej. "steps")
# by es la columna por la que agruparemos (ej. "userId)
outliersReplace <- function(df, col, by){
chunks <- unique(df[,c(by)])
for (c in chunks){
data <- df[df[by] == c,c(col)]
Q  <- quantile(data)
mmm <- Q[1]    # valor minimo
Q1  <- Q[2]    # primer cuartil
Me  <- Q[3]    # mediana
Q3  <- Q[4]    # tercer cuartil
MMM <- Q[5]    # valor maximo
IQR <- Q3 - Q1
lowLimit <- max(mmm, Q1 - 1.5*IQR)
highLimit <- min(MMM, Q3 + 1.5*IQR)
# todos los valores donde la columna by es igual a c
# y el valor de la columna col > Q3 + 1.5 * IQR
# lo reemplazamos por la mediana
df[df[by] == c && df[col] > highLimit, c(col)] <- Me
# lo mismo para el umbral inferior
df[df[by] == c && df[col] < lowLimit, c(col)] <- Me
cat(paste("El", by, c, "tiene una mediana de", col, "de", Me, "\n", sep=" " ))
}
#df
}
kk <- outliersReplace(activity,"steps","userId")
# df es el dataFrame que recibimos (ej. activity)
# col es la columna de los datos (ej. "steps")
# by es la columna por la que agruparemos (ej. "userId)
outliersReplace <- function(df, col, by){
chunks <- unique(df[,c(by)])
for (c in chunks){
data <- df[df[by] == c,c(col)]
Q  <- quantile(data)
mmm <- Q[1]    # valor minimo
Q1  <- Q[2]    # primer cuartil
Me  <- Q[3]    # mediana
Q3  <- Q[4]    # tercer cuartil
MMM <- Q[5]    # valor maximo
IQR <- Q3 - Q1
lowLimit <- max(mmm, Q1 - 1.5*IQR)
highLimit <- min(MMM, Q3 + 1.5*IQR)
# todos los valores donde la columna by es igual a c
# y el valor de la columna col > Q3 + 1.5 * IQR
# lo reemplazamos por la mediana
#df[df[by] == c && df[col] > highLimit, c(col)] <- Me
# lo mismo para el umbral inferior
#df[df[by] == c && df[col] < lowLimit, c(col)] <- Me
cat(paste("El", by, c, "tiene una mediana de", col, "de", Me, "\n", sep=" " ))
}
#df
}
kk <- outliersReplace(activity,"steps","userId")
View(activity)
activity[activity["userId"] == 10036 && activity["steps"] > 488, c("steps.O")] <- 999
View(activity)
activity[activity["userId"] == 10036 & activity["steps"] > 488, c("steps.OO")] <- 999
activity$steps.O <- NULL
activity$steps.O <- NULL
activity$steps.OO <- NULL
# df es el dataFrame que recibimos (ej. activity)
# col es la columna de los datos (ej. "steps")
# by es la columna por la que agruparemos (ej. "userId)
outliersReplace <- function(df, col, by){
chunks <- unique(df[,c(by)])
for (c in chunks){
data <- df[df[by] == c,c(col)]
Q  <- quantile(data)
mmm <- Q[1]    # valor minimo
Q1  <- Q[2]    # primer cuartil
Me  <- Q[3]    # mediana
Q3  <- Q[4]    # tercer cuartil
MMM <- Q[5]    # valor maximo
IQR <- Q3 - Q1
lowLimit <- max(mmm, Q1 - 1.5*IQR)
highLimit <- min(MMM, Q3 + 1.5*IQR)
# todos los valores donde la columna by es igual a c
# y el valor de la columna col > Q3 + 1.5 * IQR
# lo reemplazamos por la mediana
df[df[by] == c & df[col] > highLimit, c(col)] <- Me
# lo mismo para el umbral inferior
df[df[by] == c & df[col] < lowLimit, c(col)] <- Me
cat(paste("El", by, c, "tiene una mediana de", col, "de", Me, "\n", sep=" " ))
}
#df
}
kk <- outliersReplace(activity,"steps","userId")
# df es el dataFrame que recibimos (ej. activity)
# colNameData es la columna de los datos (ej. "steps")
# colNameBy es la columna por la que trocearemos (ej. "userId")
outliersReplace <- function(df, colNameData, colNameBy){
#creamos una nueva columna llamada igual que colNameData pero con .R
colNameData.R <- paste(colNameData, "R", sep=".")
df[colNameData.R] <- df[colNameData]
#obtenemos los IDs por los que partir el dataframe
IDs <- unique(df[,c(colNameBy)])
for (id in IDs){
data <- df[df[colNameBy] == id, c(colNameData) ]
Q  <- quantile(data)
minimo <- Q[1]    # valor minimo
Q1     <- Q[2]    # primer cuartil
Me     <- Q[3]    # mediana
Q3     <- Q[4]    # tercer cuartil
maximo <- Q[5]    # valor maximo
IQR <- Q3 - Q1
lowLimit <- max(minimo, Q1 - 1.5*IQR)
highLimit <- min(maximo, Q3 + 1.5*IQR)
# todos los valores donde colNameBy es igual a id
# y el valor de colNameData es > Q3 + 1.5 * IQR
# lo reemplazamos por la mediana
df[df[colNameBy] == id & df[colNameData] > highLimit, c(colNameData.R)] <- Me
# lo mismo para el umbral inferior
df[df[colNameBy] == id & df[colNameData]  < lowLimit, c(colNameData.R)] <- Me
cat(paste("El", colNameBy, id, "la mediana(", col, ") ==", Me, "\n", sep=" " ))
}
df
}
kk <- outliersReplace(activity,"steps","userId")
# df es el dataFrame que recibimos (ej. activity)
# colNameData es la columna de los datos (ej. "steps")
# colNameBy es la columna por la que trocearemos (ej. "userId")
outliersReplace <- function(df, colNameData, colNameBy){
#creamos una nueva columna llamada igual que colNameData pero con .R
colNameData.R <- paste(colNameData, "R", sep=".")
df[colNameData.R] <- df[colNameData]
#obtenemos los IDs por los que partir el dataframe
IDs <- unique(df[,c(colNameBy)])
for (id in IDs){
data <- df[df[colNameBy] == id, c(colNameData) ]
Q  <- quantile(data)
minimo <- Q[1]    # valor minimo
Q1     <- Q[2]    # primer cuartil
Me     <- Q[3]    # mediana
Q3     <- Q[4]    # tercer cuartil
maximo <- Q[5]    # valor maximo
IQR <- Q3 - Q1
lowLimit <- max(minimo, Q1 - 1.5*IQR)
highLimit <- min(maximo, Q3 + 1.5*IQR)
# todos los valores donde colNameBy es igual a id
# y el valor de colNameData es > Q3 + 1.5 * IQR
# lo reemplazamos por la mediana
df[df[colNameBy] == id & df[colNameData] > highLimit, c(colNameData.R)] <- Me
# lo mismo para el umbral inferior
df[df[colNameBy] == id & df[colNameData]  < lowLimit, c(colNameData.R)] <- Me
cat(paste("El", colNameBy, id, "la mediana(", colNameData, ") ==", Me, "\n", sep=" " ))
}
df
}
kk <- outliersReplace(activity,"steps","userId")
View(kk)
activity <- outliersReplace(activity,"steps","userId")
View(activity)
boxplot(steps ~ userId, data = activity, main = "Sin reemplazo")
boxplot(steps2 ~ userId, data = activity, main = "Con reemplazo")
boxplot(steps.R ~ userId, data = activity, main = "Con reemplazo")
par(mfrow = c(2,1))
boxplot(steps   ~ userId, data = activity, main = "Sin reemplazo")
boxplot(steps.R ~ userId, data = activity, main = "Con reemplazo")
