#creamos la columna con el rendimiento anualizado
precios$rendimiento <- (12 * precios$rental)/precios$sale
#creamos otra columna con los beneficios anuales brutos por cada 100.000 euros invertidos
precios$beneficio100k <- round(precios$rendimiento * 100000,0)
#restringir sólo a la linea 10
precios_linea10 <- precios[precios$line == "L10",]
View(precios_linea10)
#se ve cláramente que tiene 5 columnas
data <- read.fwf("https://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for",
widths="c(15, 13, 13, 13, 8)")
#se ve cláramente que tiene 5 columnas
data <- read.fwf("https://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for",
widths=c(15, 13, 13, 13, 8))
View(data)
View(data)
View(paradas_metro)
# se ve cláramente que tiene 5 columnas
# y que las 4 primeras filas las podemos saltar
data <- read.fwf("https://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for",
widths=c(15, 13, 13, 13, 8), skip=4)
View(data)
# se ve cláramente que tiene 5 columnas
# y que las 4 primeras filas las podemos saltar
data <- read.fwf("https://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for",
widths=c(15, 13, 13, 13, 8),
skip=4,
col.names = c("Week", "Nino1+2", "Nino 3", "Nino 34", "Nino 4"))
View(data)
head(data$Nino1.2)
# los valores contienen espacios delante y detrás.
# con el simbolo menos, indicamos el ancho, pero que no queremos la columna
data <- read.fwf("https://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for",
widths=c(-1, 9, -5, 8, -5, 8, -5, 8, -5, 8),
skip=4,
col.names = c("Week", "Nino1+2", "Nino 3", "Nino 34", "Nino 4")
stringAsFactors = F)
# los valores contienen espacios delante y detrás.
# con el simbolo menos, indicamos el ancho, pero que no queremos la columna
data <- read.fwf("https://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for",
widths=c(-1, 9, -5, 8, -5, 8, -5, 8, -5, 8),
skip=4,
col.names = c("", "Week","","Nino1+2","", "Nino 3","","Nino 34","", "Nino 4"),
stringAsFactors = F)
# los valores contienen espacios delante y detrás.
# con el simbolo menos, indicamos el ancho, pero que no queremos la columna
data <- read.fwf("https://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for",
widths=c(-1, 9, -5, 8, -5, 8, -5, 8, -5, 8),
skip=4,
col.names = c("", "Week","","Nino1+2","", "Nino 3","","Nino 34","", "Nino 4")
)
# los valores contienen espacios delante y detrás.
# con el simbolo menos, indicamos el ancho, pero que no queremos la columna
data <- read.fwf("https://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for",
widths=c(-1, 9, -5, 8, -5, 8, -5, 8, -5, 8),
skip=4
)
View(data)
View(data)
# los valores contienen espacios delante y detrás.
# con el simbolo menos, indicamos el ancho, pero que no queremos la columna
data <- read.fwf("https://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for",
widths=c(-1, 9, -5, 8, -5, 8, -5, 8, -5, 8),
skip=4,
col.names = c("Week", "Nino1+2", "Nino 3", "Nino 34", "Nino 4")
)
View(data)
View(data)
# los valores contienen espacios delante y detrás.
# con el simbolo menos, indicamos el ancho, pero que no queremos la columna
data <- read.fwf("https://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for",
widths=c(-1, 9, -5, 8, -5, 8, -5, 8, -5, 8),
skip=4,
col.names = c("Week", "Nino1+2", "Nino3", "Nino34", "Nino4"),
stringsAsFactors = F
)
library(xml)
install.packages("xml")
install.packages("XML")
library(xml)
library(XML)
doc <- readHTMLTable("https://www.adictosaltrabajo.com/autores/")
View(doc)
View(doc)
doc <- readHTMLTable("https://www.adictosaltrabajo.com/author/juan-antonio-jimenez-torres/")
doc <- readHTMLTable(urlDeEjemplo)
install.packages("XML")
install.packages("XML")
library(XML)
urlDeEjemplo <- "https://www.adictosaltrabajo.com/autores/"
doc <- readHTMLTable(urlDeEjemplo)
library(curl)
data
library(XML)
urlDeEjemplo <- "https://www.adictosaltrabajo.com/autores/"
doc <- readHTMLTable(urlDeEjemplo)
library(curl)
data <- getURL(urlDeEjemplo)
curl("https://httpbin.org/status/418", "r")
data <- curl_fetch_memory(urlDeEjemplo)
View(data)
View(data)
doc <- readHTMLTable(data)
doc <- readHTMLTable(data$content)
urlDeEjemplo <- "https://cincodias.elpais.com/mercados/bolsa/ibex_35/582/"
doc <- readHTMLTable(urlDeEjemplo)
data <- curl_fetch_memory(urlDeEjemplo)
doc <- readHTMLTable(data$content)
library(RCurl)
doc <- getURL(urlDeEjemplo)
install.packages("RCurl")
library(RCurl)
doc <- getURL(urlDeEjemplo)
doc <- readHTMLTable(doc)
View(doc)
View(doc)
View(doc)
View(data)
View(doc)
View(doc)
View(doc)
ibex35 <-doc[[indice_valores]]
ibex35 <-doc[["indice_valores"]]
urlDeEjemplo <- "https://cincodias.elpais.com/mercados/bolsa/ibex_35/582/"
doc <- readHTMLTable(urlDeEjemplo)
library(RCurl)
# y obtenemos el HTML y lo guardamos en una variable de R
htmlData <- getURL(urlDeEjemplo)
# ahora buscamos las tablas existentes en el HTML
tables <- readHTMLTable(htmlData)
# vemos que es una lista de dos dataFrames (hay dos tablas)
# nos quedamos con el que se llama indice_valores
ibex35 <- tables[["indice_valores"]]
View(ibex35)
autoresHTML <- getURL("https://www.adictosaltrabajo.com/autores/")
tablesAutores <- readHTMLTable(autoresHTML)
View(tablesAutores)
urlTopBDH_2018 <- "http://www.bne.es/media/datosgob/estadisticas/bdh/masconsultadas/consultadas_2018.xml"
xmlDocument <- xmlParse(urlTopBDH_2018)
rootNode <- xmlRoot(xmlDocument)
rootNode[1]
# vemos que rootNode es de tipo External pointer of class "XMLInternatElementNode"
# es decir, que contiene la lista de items. Veamos el item número 5
rootNode[5]
xmlSApply(x, xmlValue)
topBHD <- xmlSApply(rootNode, function(x){
xmlSApply(x, xmlValue)
})
View(topBHD)
View(topBHD)
View(topBHD)
View(topBHD)
View(topBHD)
View(topBHD)
xmlSApply(y,xmlValue)
xmlSApply(x, function(y){
xmlSApply(y,xmlValue)
})
})
topBHD <- xmlSApply(rootNode, function(x){
xmlSApply(x, function(y){
xmlSApply(y,xmlValue)
})
})
View(topBHD)
View(topBHD)
View(topBHD)
View(topBHD)
urlTopBDH_2018 <- "http://www.bne.es/media/datosgob/estadisticas/bdh/masconsultadas/consultadas_2018.xml"
xmlDocument <- xmlParse(urlTopBDH_2018)
rootNode <- xmlRoot(xmlDocument)
topBHD <- xmlSApply(rootNode, function(x){
xmlSApply(x, function(x){
xmlSApply(x,xmlValue)
})
})
View(topBHD)
rootNode <- xmlRoot(xmlDocument)
topBHD <- xmlSApply(rootNode, function(x){
xmlSApply(x, xmlValue)
})
View(topBHD)
topBHD <- xmlElementsByTagName(rootNode, "item")
View(topBHD)
View(topBHD)
itemsList <- xmlElementsByTagName(rootNode, "item")
kk<-xmlSApply(itemsList, function(x){ xmlSApply(x, xmlValue)})
itemsList[[1]]
xmlLApply(itemsList, function(x) xmlValue)
xmlSApply(itemsList, function(x) xmlValue)
xmlSApply(rootNode, function(x) xmlValue)
kk <- xmlSApply(rootNode, function(x) xmlValue)
View(kk)
View(kk[["item"]])
kk <- xmlSApply(rootNode, function(x) xmlSApply(x,xmlValue))
View(kk)
View(kk)
view(kk)
View(kk)
kk <- xmlSApply(rootNode, function(x) xmlSApply(x,function(x,xmlvalue)))
kk <- xmlSApply(rootNode, function(x) {
xmlSApply(x,function(x){xmlvalue})
})
kk <- xmlSApply(rootNode, function(x) {
xmlSApply(x,function(x){xmlValue})
})
View(kk)
kk <- xmlSApply(rootNode, function(x) {
xmlSApply(x, xmlValue)
})
View(kk)
urlTopBDH_2018 <- "http://www.bne.es/media/datosgob/estadisticas/autoridades/Autoridades_2018.xml"
xmlDocument <- xmlParse(urlTopBDH_2018)
rootNode <- xmlRoot(xmlDocument)
kk <- xmlSApply(rootNode, function(x) {
xmlSApply(x, xmlValue)
})
View(kk)
View(topBHD)
urlBNE2018 <- "http://www.bne.es/media/datosgob/estadisticas/autoridades/Autoridades_2018.xml"
xmlDocument <- xmlParse(urlBNE2018)
rootNode <- xmlRoot(xmlDocument)
# vemos que rootNode es de tipo External pointer of class "XMLInternatElementNode"
# es decir, que contiene la lista de items. Veamos el item número 5
rootNode[5]
catalogo <- xmlSApply(rootNode, function(x) {
xmlSApply(x, xmlValue)
})
# vemos que rootNode es de tipo External pointer of class "XMLInternatElementNode"
# es decir, que contiene la lista de items. Veamos el item número 5
rootNode[5]
View(catalogo)
# transponemos la matriz catalogo y la guardamos en la misma variable
catalogo <- t(catalogo)
View(catalogo)
catalogo$rowNames <- NULL
catalogo$row.names <- NULL
View(catalogo)
View(catalogo)
View(catalogo)
catalogo <- xmlSApply(rootNode, function(x) {
xmlSApply(x, xmlValue)
})
# transponemos la matriz catalogo y la guardamos en la misma variable
catalogo <- t(catalogo)
View(catalogo)
# y lo convertimos en un dataFrame
catalogo <- data.frame(catalogo)
View(catalogo)
# pero los nombres de las filas son item.1 ... item.10.
# podemos solventarlo poniéndolos a NULL
catalogo[row.names(NULL)]
View(catalogo)
View(catalogo)
# pero los nombres de las filas son item.1 ... item.10.
# podemos solventarlo poniéndolos a NULL
catalogo[row.names()] <- NULL
# pero los nombres de las filas son item.1 ... item.10.
# podemos solventarlo poniéndolos a NULL
row.names(catalogo) <- NULL
View(catalogo)
# pero a lo mejor preferimos usar como rowNames el valor de la columna "Datos"
# y quitar dicha columna que no aporta información numérica
row.names(catalogo) <- catalogo$Datos
catalogo$Datos <- NULL
library(jsonlite)
library(curl)
uri_actividades_culturales <- "https://datos.madrid.es/egob/catalogo/206974-0-agenda-eventos-culturales-100.json"
actividades_culturales <- fromJSON(uri_actividades_culturales)
actividades_culturales <- fromJSON(uri_actividades_culturales)
actividades_culturales <- fromJSON(uri_actividades_culturales, flatten = TRUE)
actividades_culturales <- fromJSON(uri_actividades_culturales, na.fail(NULL))
actividades_culturales <- fromJSON(uri_actividades_culturales, na=null)
install.packages(jsonlite)
install.packages(jsonlite)
install.packages("jsonlite")
install.packages("jsonlite")
data[["content"]]
library(jsonlite)
library(curl)
uri_actividades_culturales <- "https://datos.madrid.es/egob/catalogo/206974-0-agenda-eventos-culturales-100.json"
actividades_culturales <- fromJSON(uri_actividades_culturales, na=null)
uri_actividades_culturales <- "https://datos.madrid.es/egob/catalogo/212504-0-agenda-actividades-deportes.json"
actividades_culturales <- fromJSON(uri_actividades_culturales, na=null)
actividades_culturales <- fromJSON(uri_actividades_culturales)
View(actividades_culturales)
uri_actividades_culturales <- "https://datosabiertos.jcyl.es/web/jcyl/risp/es/energia/vehiculo_electrico/1284273412751.json"
actividades_culturales <- fromJSON(uri_actividades_culturales)
View(actividades_culturales)
uri_puntos_recarga_CyL <- "https://datosabiertos.jcyl.es/web/jcyl/risp/es/energia/vehiculo_electrico/1284273412751.json"
puntos_recarga_CyL <- fromJSON(uri_puntos_recarga_CyL)
data <- puntos_recarga_CyL$document$list$element$attribute
View(data)
View(data)
View(data)
puntos_recarga_CyL$document$list$element$attribute[[1]]
View(data)
View(data)
data <- puntos_recarga_CyL$document$list$element
View(data)
View(data)
View(data)
View(data)
View(data)
head(data)
head(data$attribute)
View(data)
data$attribute[[1]]
data
View(data)
View(data)
kk <- lapply(data, function(x) {
x$name <- x$valor
})
x$name
kk <- lapply(data, function(x) {
x$name
})
View(kk)
kk <- lapply(data, function(x) {
x
})
View(kk)
View(kk)
#seteamos el directorio de trabajo
setwd("/lab/adictosaltrabajo/rstudio/03")
kk <- fromJSON("poblacion_alcorcon.json")
View(kk)
View(kk)
View(kk)
View(kk)
datos <- kk$Datos
datos <- data.frame(kk$Datos)
View(datos)
View(datos)
kk <- fromJSON("poblacion_alcorcon.json")
View(kk)
View(kk)
View(kk)
View(kk)
kk <- fromJSON("poblacion_alcorcon.json")
kk$Datos
head(kk$Datos)
head(kk$Datos$Metricas)
type kk$Datos$Metricas
typeof(kk$Datos$Metricas)
typeof(kk$Datos)
typeof(kk$Datos$Metricas)
typeof(kk$Datos$Metricas$Datos)
head(kk$Datos$Metricas$Datos)
datos <- kk$Datos$Metricas$Datos
datos <- [[kk$Datos$Metricas$Datos]]
datos <- kk$Datos$Metricas$Datos
datos <- as.data.frame(kk$Datos$Metricas$Datos)
View(datos)
View(datos)
poblacion_alcorcon <- fromJSON("poblacion_alcorcon.json")
poblacion_alcorcon <- fromJSON("poblacion_alcorcon.json")
View(poblacion_alcorcon)
View(poblacion_alcorcon)
# Al ser una lista podemos recorrerla como array asociativo
poblacion_alcorcon[[Datos]][[Metricas]][[Datos]]
# Al ser una lista podemos recorrerla como array asociativo
poblacion_alcorcon[["Datos"]][["Metricas"]][["Datos"]]
# Al ser una lista podemos recorrerla como array asociativo
poblacion_alcorcon[["Datos"]][["Metricas"]][["Datos"]][[1]]
# pero podemos usar la potencia del operador $ (RStudio nos autocompleta)
pa2 <- poblacion_alcorcon$Datos$Metricas$Datos[[1]]
# Al ser una lista podemos recorrerla como array asociativo
pa1 <- poblacion_alcorcon[["Datos"]][["Metricas"]][["Datos"]][[1]]
identical(pa1,pa2)
View(pa2)
hist(pa1$valor)
hist(pa1$Valor)
hist(pa1$Valor ~ pa1$Agno)
hist(pa1$Valor ~ pa1$Agno)
hist(pa1$Agno)
hist(pa1$Valor, x = pa1$Agno)
hist(pa1$Valor, x = pa1$Agno,breaks = pa1$Agno)
hist(pa1$Valor, breaks = pa1$Agno)
View(pa1)
View(pa1)
hist(pa1$Valor, breaks = 20)
hist(pa1$Agno, breaks = 20)
View(pa1)
mtcars
View(rock)
View(iris)
View(mtcars)
View(npk)
View(airquality)
View(airquality)
hist(airquality$Temp)
numsaltos = max(airquality$Temp) - min(airquality$Temp)
hist(airquality$Temp, braks = numsaltos)
hist(airquality$Temp)
hist(airquality$Temp)
numsaltos = max(airquality$Temp) - min(airquality$Temp)
hist(airquality$Temp, braks = numsaltos)
hist(airquality$Temp, breaks = numsaltos)
hist(airquality$Temp, breaks = numsaltos/2)
hist(airquality$Temp,
breaks = numsaltos/2,
angle = 5)
hist(airquality$Temp,
breaks = numsaltos/2,
angle = 50)
hist(airquality$Temp,
breaks = numsaltos/2,
col = blue)
hist(airquality$Temp,
breaks = numsaltos/2,
col = "blue")
hist(airquality$Temp,
breaks = numsaltos/2,
col = "lightgoldenrodyellow")
hist(airquality$Temp,
breaks = numsaltos/2,
col = "lightgoldenrodyellow",
angle = 50)
hist(airquality$Temp,
breaks = numsaltos/2,
col = "lightgoldenrodyellow",
border = "lightgoldenrod3"
)
hist(airquality$Temp,
breaks = numsaltos/2,
col = "lightgoldenrodyellow",
border = "lightgoldenrod3",
xlab = "Temperatura (ºF)"
)
hist(airquality$Temp,
breaks = numsaltos/2,
col = "lightgoldenrodyellow",
border = "lightgoldenrod3",
xlab = "Temperatura (ºF)",
ylab = "Frecuencia"
)
hist(airquality$Temp,
breaks = numsaltos/2,
col = "lightgoldenrodyellow",
border = "lightgoldenrod3",
xlab = "Temperatura (ºF)",
ylab = "Frecuencia",
plot = T
)
hist(airquality$Temp,
breaks = numsaltos/2,
col = "lightgoldenrodyellow",
border = "lightgoldenrod3",
xlab = "Temperatura (ºF)",
ylab = "Frecuencia",
border = T
)
hist(airquality$Temp,
breaks = numsaltos/2,
col = "lightgoldenrodyellow",
border = "lightgoldenrod3",
xlab = "Temperatura (ºF)",
ylab = "Frecuencia",
title = "kk"
)
hist(airquality$Temp,
breaks = numsaltos/2,
col = "lightgoldenrodyellow",
border = "lightgoldenrod3",
xlab = "Temperatura (ºF)",
ylab = "Frecuencia",
main = "Frecuencia de temperaturas en NY (1973"
)
hist(airquality$Temp,
breaks = numsaltos/2,
col = "lightgoldenrodyellow",
border = "lightgoldenrod3",
xlab = "Temperatura (ºF)",
ylab = "Frecuencia",
main = "Frecuencia de temperaturas en NY (1973)"
)
hist(airquality$Temp)
hist(airquality$Temp,
breaks = numsaltos/2,
col = "lightgoldenrodyellow",
border = "lightgoldenrod3",
xlab = "Temperatura (ºF)",
ylab = "Frecuencia",
main = "Frecuencia de temperaturas en NY (1973)"
)
colors()
kk <- c(3.55,3,3.21)
municipios.nombre <- c("Madrid","Móstoles","Alcalá de Henares","Fuenlabrada","Leganés","Getafe","Alcorcón")
municipios.población <- c(3265038,205015,203686,198560,186552,170115,168523)
municipios.superficie <- c(605.77, 45.36, 87.72, 39.41, 43.09, 78.38, 33.73)
municipios.altitud <- c(657, 660, 587, 662, 667, 622, 711)
municipios <- data.frame(
municipio.nombre,
municipios.poblacion,
municipios.superficie,
municipios.altitud
)
municipios <- data.frame(
municipios.nombre,
municipios.poblacion,
municipios.superficie,
municipios.altitud
)
municipios.poblacion <- c(3265038,205015,203686,198560,186552,170115,168523)
municipios <- data.frame(
municipios.nombre,
municipios.poblacion,
municipios.superficie,
municipios.altitud
)
View(municipios)
